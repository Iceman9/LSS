--- tbb/test/common/concurrent_lru_cache_common.h.org	2025-03-27 16:53:25.117515791 +0100
+++ tbb/test/common/concurrent_lru_cache_common.h	2025-03-27 16:55:04.461469063 +0100
@@ -19,6 +19,7 @@
 
 
 #include "test.h"
+#include "utils.h"
 #include <tbb/concurrent_lru_cache.h>
 
 //-----------------------------------------------------------------------------
@@ -114,7 +115,15 @@
         }
 
         ~instance_counter() {
-            if (! --(*my_p_count))
+            bool is_last = ! --(*my_p_count);
+#if __GNUC__ == 12
+        // GCC 12 warns about using my_p_count after delete.
+        // The test was investigated and no problems were detected
+        // The following statement silence the warning
+        static bool unused_is_last = is_last;
+        utils::suppress_unused_warning(unused_is_last);
+#endif
+            if (is_last)
                 delete(my_p_count);
         }
 
--- tbb/test/common/doctest.h.org	2025-03-27 16:55:18.101462188 +0100
+++ tbb/test/common/doctest.h	2025-03-27 16:55:38.669451627 +0100
@@ -1362,11 +1362,13 @@
                 , m_at(at) {}
 
         DOCTEST_NOINLINE operator Result() {
+DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Waddress")
 // this is needed only for MSVC 2015:
 // https://ci.appveyor.com/project/onqtam/doctest/builds/38181202
 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4800) // 'int': forcing value to bool
             bool res = static_cast<bool>(lhs);
 DOCTEST_MSVC_SUPPRESS_WARNING_POP
+DOCTEST_GCC_SUPPRESS_WARNING_POP
             if(m_at & assertType::is_false) //!OCLINT bitwise operator in conditional
                 res = !res;
 
--- tbb/include/oneapi/tbb/detail/_concurrent_unordered_base.h.org	2025-03-27 16:52:36.093536429 +0100
+++ tbb/include/oneapi/tbb/detail/_concurrent_unordered_base.h	2025-03-27 16:52:46.709532108 +0100
@@ -917,7 +917,7 @@
             node_allocator_traits::deallocate(dummy_node_allocator, node, 1);
         } else {
             // GCC 11.1 issues a warning here that incorrect destructor might be called for dummy_nodes
-            #if (__TBB_GCC_VERSION >= 110100 && __TBB_GCC_VERSION < 120000 ) && !__clang__ && !__INTEL_COMPILER
+            #if (__TBB_GCC_VERSION >= 110100 && __TBB_GCC_VERSION < 130000 ) && !__clang__ && !__INTEL_COMPILER
             volatile
             #endif
             value_node_ptr val_node = static_cast<value_node_ptr>(node);
--- tbb/include/oneapi/tbb/detail/_segment_table.h.org	2025-03-27 16:50:29.041581000 +0100
+++ tbb/include/oneapi/tbb/detail/_segment_table.h	2025-03-27 16:52:13.289545422 +0100
@@ -60,17 +60,19 @@
     static constexpr size_type pointers_per_long_table = sizeof(size_type) * 8;
 public:
     segment_table( const allocator_type& alloc = allocator_type() )
-        : my_segment_table_allocator(alloc), my_segment_table(my_embedded_table)
+        : my_segment_table_allocator(alloc), my_segment_table(nullptr)
         , my_first_block{}, my_size{}, my_segment_table_allocation_failed{}
     {
+        my_segment_table.store(my_embedded_table, std::memory_order_relaxed);
         zero_table(my_embedded_table, pointers_per_embedded_table);
     }
 
     segment_table( const segment_table& other )
         : my_segment_table_allocator(segment_table_allocator_traits::
                                      select_on_container_copy_construction(other.my_segment_table_allocator))
-        , my_segment_table(my_embedded_table), my_first_block{}, my_size{}, my_segment_table_allocation_failed{}
+        , my_segment_table(nullptr), my_first_block{}, my_size{}, my_segment_table_allocation_failed{}
     {
+        my_segment_table.store(my_embedded_table, std::memory_order_relaxed);
         zero_table(my_embedded_table, pointers_per_embedded_table);
         try_call( [&] {
             internal_transfer(other, copy_segment_body_type{*this});
@@ -80,9 +82,10 @@
     }
 
     segment_table( const segment_table& other, const allocator_type& alloc )
-        : my_segment_table_allocator(alloc), my_segment_table(my_embedded_table)
+        : my_segment_table_allocator(alloc), my_segment_table(nullptr)
         , my_first_block{}, my_size{}, my_segment_table_allocation_failed{}
     {
+        my_segment_table.store(my_embedded_table, std::memory_order_relaxed);
         zero_table(my_embedded_table, pointers_per_embedded_table);
         try_call( [&] {
             internal_transfer(other, copy_segment_body_type{*this});
@@ -92,17 +95,19 @@
     }
 
     segment_table( segment_table&& other )
-        : my_segment_table_allocator(std::move(other.my_segment_table_allocator)), my_segment_table(my_embedded_table)
+        : my_segment_table_allocator(std::move(other.my_segment_table_allocator)), my_segment_table(nullptr)
         , my_first_block{}, my_size{}, my_segment_table_allocation_failed{}
     {
+        my_segment_table.store(my_embedded_table, std::memory_order_relaxed);
         zero_table(my_embedded_table, pointers_per_embedded_table);
         internal_move(std::move(other));
     }
 
     segment_table( segment_table&& other, const allocator_type& alloc )
-        : my_segment_table_allocator(alloc), my_segment_table(my_embedded_table), my_first_block{}
+        : my_segment_table_allocator(alloc), my_segment_table(nullptr), my_first_block{}
         , my_size{}, my_segment_table_allocation_failed{}
     {
+        my_segment_table.store(my_embedded_table, std::memory_order_relaxed);
         zero_table(my_embedded_table, pointers_per_embedded_table);
         using is_equal_type = typename segment_table_allocator_traits::is_always_equal;
         internal_move_construct_with_allocator(std::move(other), alloc, is_equal_type());
--- tbb/cmake/compilers/GNU.cmake.org	2025-03-27 17:07:04.829011986 +0100
+++ tbb/cmake/compilers/GNU.cmake	2025-03-27 17:08:29.424950887 +0100
@@ -52,6 +52,9 @@
 if (NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL Intel)
     # gcc 6.0 and later have -flifetime-dse option that controls elimination of stores done outside the object lifetime
     set(TBB_DSE_FLAG $<$<NOT:$<VERSION_LESS:${CMAKE_CXX_COMPILER_VERSION},6.0>>:-flifetime-dse=1>)
+
+    # Suppress GCC 12.x-13.x warning here that to_wait_node(n)->my_is_in_list might have size 0
+    set(TBB_COMMON_COMPILE_FLAGS ${TBB_COMMON_COMPILE_FLAGS} -Wno-stringop-overflow)
 endif()
 
 # Workaround for heavy tests and too many symbols in debug (rellocation truncated to fit: R_MIPS_CALL16)
