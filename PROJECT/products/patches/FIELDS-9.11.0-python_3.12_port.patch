--- FIELDS/src/MEDCouplingCorba_Swig/Client/MEDCouplingClient.i.org	2025-02-19 12:50:30.475858000 +0100
+++ FIELDS/src/MEDCouplingCorba_Swig/Client/MEDCouplingClient.i	2025-02-19 12:50:54.430746131 +0100
@@ -88,7 +88,7 @@
           PyObject *iorField=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",fieldPtr);
           if(!iorField)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCouplingFieldDoubleClient.New appears to differ from CORBA reference ! Expecting a FieldDouble CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorField), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorField, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var fieldPtrCpp=orb->string_to_object(ior);
@@ -120,7 +120,7 @@
           PyObject *iorField=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",fieldPtr);
           if(!iorField)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCouplingFieldTemplateClient.New appears to differ from CORBA reference ! Expecting a FieldTemplate CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorField), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorField, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var fieldPtrCpp=orb->string_to_object(ior);
@@ -152,7 +152,7 @@
           PyObject *iorField=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",fieldPtr);
           if(!iorField)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCouplingFieldTemplateClient.New appears to differ from CORBA reference ! Expecting a MultiFields CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorField), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorField, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var fieldPtrCpp=orb->string_to_object(ior);
@@ -185,7 +185,7 @@
           PyObject *iorField=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",fieldPtr);
           if(!iorField)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCouplingFieldOverTimeClient.New appears to differ from CORBA reference ! Expecting a FieldOverTime CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorField), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorField, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var fieldPtrCpp=orb->string_to_object(ior);
@@ -217,7 +217,7 @@
           PyObject *iorMesh=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",meshPtr);
           if(!iorMesh)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCouplingMeshClient.New appears to differ from CORBA reference ! Expecting a MeshCorbaInterface CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorMesh), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorMesh, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var meshPtrCpp=orb->string_to_object(ior);
@@ -292,7 +292,7 @@
           PyObject *iorMesh=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",meshPtr);
           if(!iorMesh)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCouplingUMeshClient.New appears to differ from CORBA reference ! Expecting a UMeshCorbaInterface CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorMesh), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorMesh, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var meshPtrCpp=orb->string_to_object(ior);
@@ -324,7 +324,7 @@
           PyObject *iorMesh=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",meshPtr);
           if(!iorMesh)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCoupling1SGTUMeshClient.New appears to differ from CORBA reference ! Expecting a 1SGTUMeshCorbaInterface CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorMesh), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorMesh, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var meshPtrCpp=orb->string_to_object(ior);
@@ -356,7 +356,7 @@
           PyObject *iorMesh=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",meshPtr);
           if(!iorMesh)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCoupling1DGTUMeshClient.New appears to differ from CORBA reference ! Expecting a 1DGTUMeshCorbaInterface CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorMesh), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorMesh, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var meshPtrCpp=orb->string_to_object(ior);
@@ -388,7 +388,7 @@
           PyObject *iorMesh=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",meshPtr);
           if(!iorMesh)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCouplingExtrudedMeshClient.New appears to differ from CORBA reference ! Expecting an ExtrudedMeshCorbaInterface CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorMesh), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorMesh, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var meshPtrCpp=orb->string_to_object(ior);
@@ -420,7 +420,7 @@
           PyObject *iorMesh=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",meshPtr);
           if(!iorMesh)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCouplingCMeshClient.New appears to differ from CORBA reference ! Expecting a CMeshCorbaInterface CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorMesh), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorMesh, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var meshPtrCpp=orb->string_to_object(ior);
@@ -452,7 +452,7 @@
           PyObject *iorMesh=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",meshPtr);
           if(!iorMesh)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCouplingIMeshClient.New appears to differ from CORBA reference ! Expecting a IMeshCorbaInterface CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorMesh), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorMesh, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var meshPtrCpp=orb->string_to_object(ior);
@@ -484,7 +484,7 @@
           PyObject *iorMesh=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",meshPtr);
           if(!iorMesh)
             throw INTERP_KERNEL::Exception("Error : the input parameter of MEDCouplingCurveLinearMeshClient.New appears to differ from CORBA reference ! Expecting a CurveLinearMeshCorbaInterface CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorMesh), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorMesh, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var meshPtrCpp=orb->string_to_object(ior);
@@ -516,7 +516,7 @@
           PyObject *iorMesh=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",meshPtr);
           if(!iorMesh)
             throw INTERP_KERNEL::Exception("Error : the input parameter of DataArrayDoubleClient.New appears to differ from CORBA reference ! Expecting a DataArrayDoubleCorbaInterface CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorMesh), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorMesh, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var meshPtrCpp=orb->string_to_object(ior);
@@ -548,7 +548,7 @@
           PyObject *iorMesh=PyObject_CallMethod(orbPython,(char*)"object_to_string",(char*)"O",meshPtr);
           if(!iorMesh)
             throw INTERP_KERNEL::Exception("Error : the input parameter of DataArrayIntClient.New appears to differ from CORBA reference ! Expecting a DataArrayIntCorbaInterface CORBA reference !");
-          char *ior=Py_EncodeLocale(PyUnicode_AS_UNICODE(iorMesh), NULL);
+          char *ior=Py_EncodeLocale(PyUnicode_AsWideCharString(iorMesh, NULL), NULL);
           int argc=0;
           CORBA::ORB_var orb=CORBA::ORB_init(argc,0);
           CORBA::Object_var meshPtrCpp=orb->string_to_object(ior);
--- FIELDS/src/MEDCalc/cmp/MEDPresentation.cxx.org	2025-02-19 12:27:38.384135484 +0100
+++ FIELDS/src/MEDCalc/cmp/MEDPresentation.cxx	2025-02-19 12:42:38.819392567 +0100
@@ -995,7 +995,7 @@
       PyObject* p_obj = getPythonObjectFromMain("__compo");
       std::string compo;
       if (p_obj && PyUnicode_Check(p_obj))
-        compo = std::string(Py_EncodeLocale(PyUnicode_AS_UNICODE(p_obj), NULL));  // pointing to internal Python memory, so make a copy!!
+        compo = std::string(Py_EncodeLocale(PyUnicode_AsWideCharString(p_obj, NULL), NULL));  // pointing to internal Python memory, so make a copy!!
       else
         {
           STDLOG("Unexpected Python error");
--- FIELDS/src/MEDCalculator/Swig/SPythonParser.cxx.org	2025-02-19 12:20:55.473086857 +0100
+++ FIELDS/src/MEDCalculator/Swig/SPythonParser.cxx	2025-02-19 12:22:47.431196928 +0100
@@ -459,7 +459,7 @@
   oss << TMPVAR << "=type(" << var << ").__name__";
   PyRun_String(oss.str().c_str(),Py_single_input,glob,loc);
   PyObject *p=PyDict_GetItemString(glob,TMPVAR);
-  const char *type=Py_EncodeLocale(PyUnicode_AS_UNICODE(p), NULL);
+  const char *type=Py_EncodeLocale(PyUnicode_AsWideCharString(p, NULL), NULL);
   std::string typecpp=std::string(type);
   if(typecpp=="function")
     return FUNC_TYPE;
--- FIELDS/src/MEDCalculator/Swig/MEDCalculatorTypemaps.i.org	2025-02-19 12:49:39.825113075 +0100
+++ FIELDS/src/MEDCalculator/Swig/MEDCalculatorTypemaps.i	2025-02-19 12:49:59.622940937 +0100
@@ -48,7 +48,7 @@
     }
   if(PyString_Check(o))
     {
-      char *s=Py_EncodeLocale(PyUnicode_AS_UNICODE(o), NULL);
+      char *s=Py_EncodeLocale(PyUnicode_AsWideCharString(o, NULL), NULL);
       rs=s;
       return ;
     }
