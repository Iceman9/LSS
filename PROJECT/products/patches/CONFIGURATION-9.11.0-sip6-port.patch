diff --color -ruNZ CONFIGURATION/cmake/FindPyQt5.cmake CONFIGURATION.new/cmake/FindPyQt5.cmake
--- CONFIGURATION/cmake/FindPyQt5.cmake	2023-06-19 18:25:20.000000000 +0200
+++ CONFIGURATION.new/cmake/FindPyQt5.cmake	2025-02-24 15:54:52.655355917 +0100
@@ -56,7 +56,7 @@
 #   - /usr/share/sip/PyQt5/QtCore, for a system install
 #   - or <xyz>/sip/QtCore, for a custom install
 #   - or <xyz>/share/sip/QtCore, for a custom install
-FIND_FILE(PYQT_SIP_MAIN_FILE qobject.sip PATH_SUFFIXES share/sip/QtCore sip/QtCore share/sip/PyQt5/QtCore lib/python3/dist-packages/PyQt5/bindings/QtCore lib64/python3.10/site-packages/PyQt5/bindings/QtCore lib64/python3.11/site-packages/PyQt5/bindings/QtCore)
+FIND_FILE(PYQT_SIP_MAIN_FILE qobject.sip PATH_SUFFIXES share/sip/QtCore sip/QtCore share/sip/PyQt5/QtCore lib/python3/dist-packages/PyQt5/bindings/QtCore lib64/python3.10/site-packages/PyQt5/bindings/QtCore lib64/python3.11/site-packages/PyQt5/bindings/QtCore lib/python3.12/site-packages/PyQt5/bindings/QtCore lib/python3.13/site-packages/PyQt5/bindings/QtCore Lib/PyQt5/bindings/QtCore)
 
 IF(PYQT_SIP_MAIN_FILE)
   GET_FILENAME_COMPONENT(PYQT_SIPS_DIR "${PYQT_SIP_MAIN_FILE}" PATH)
diff --color -ruNZ CONFIGURATION/cmake/FindSalomeSIP.cmake CONFIGURATION.new/cmake/FindSalomeSIP.cmake
--- CONFIGURATION/cmake/FindSalomeSIP.cmake	2023-06-19 18:25:20.000000000 +0200
+++ CONFIGURATION.new/cmake/FindSalomeSIP.cmake	2025-02-24 15:54:52.655355917 +0100
@@ -23,10 +23,15 @@
 #
 #  !! Please read the generic detection procedure in SalomeMacros.cmake !!
 #
-SALOME_FIND_PACKAGE_AND_DETECT_CONFLICTS(SIP SIP_EXECUTABLE 2)
-MARK_AS_ADVANCED(SIP_EXECUTABLE SIP_INCLUDE_DIR)
+SALOME_FIND_PACKAGE_AND_DETECT_CONFLICTS(SIP SIP_MODULE_EXECUTABLE 2)
+IF(SIP_VERSION AND SIP_VERSION VERSION_GREATER_EQUAL "6")
+  set(SIP_EXECUTABLE ${SIP_MODULE_EXECUTABLE})
+ENDIF()
+MARK_AS_ADVANCED(SIP_EXECUTABLE SIP_MODULE_EXECUTABLE SIP_INCLUDE_DIR)
 
 IF(SIP_FOUND) 
+  SALOME_ACCUMULATE_ENVIRONMENT(PATH ${SIP_BUILD_EXECUTABLE})
+  SALOME_ACCUMULATE_ENVIRONMENT(PATH ${SIP_MODULE_EXECUTABLE})
   SALOME_ACCUMULATE_ENVIRONMENT(PATH ${SIP_EXECUTABLE})
   SALOME_ACCUMULATE_ENVIRONMENT(LD_LIBRARY_PATH ${SIP_PYTHONPATH})
   SALOME_ACCUMULATE_ENVIRONMENT(PYTHONPATH ${SIP_PYTHONPATH})
diff --color -ruNZ CONFIGURATION/cmake/FindSIP.cmake CONFIGURATION.new/cmake/FindSIP.cmake
--- CONFIGURATION/cmake/FindSIP.cmake	2023-06-19 18:25:20.000000000 +0200
+++ CONFIGURATION.new/cmake/FindSIP.cmake	2025-02-24 15:54:52.655355917 +0100
@@ -21,6 +21,7 @@
 # Sets the following variables:
 #   SIP_VERSION           - version of SIP
 #   SIP_MODULE_EXECUTABLE - path to the sip-module executable (sip >= 5)
+#   SIP_BUILD_EXECUTABLE - path to the sip-build executable (sip >= 6)
 #   SIP_EXECUTABLE        - path to the sip executable
 #   SIP_INCLUDE_DIR       - path to the sip headers (sip < 5)
 #   SIP_PYTHONPATH        - path to the sip Python packages
@@ -33,13 +34,30 @@
   MESSAGE(STATUS "Looking for SIP ...")
 ENDIF()
 
+# Find MODULE first
+FIND_PROGRAM(SIP_MODULE_EXECUTABLE
+             NAMES sip-module
+             HINTS $ENV{SIP_ROOT_DIR}
+             PATH_SUFFIXES bin Scripts)
+# Detect sip version
+EXECUTE_PROCESS(COMMAND ${SIP_MODULE_EXECUTABLE} "-V"
+                OUTPUT_VARIABLE SIP_VERSION
+                OUTPUT_STRIP_TRAILING_WHITESPACE
+                ERROR_QUIET)
+
+# Find BUILD
+FIND_PROGRAM(SIP_BUILD_EXECUTABLE
+             NAMES sip-build
+             HINTS $ENV{SIP_ROOT_DIR}
+             PATH_SUFFIXES bin Scripts)
+
 # Find executable
 FIND_PROGRAM(SIP_EXECUTABLE
              NAMES sip5 sip4 sip
              HINTS $ENV{SIP_ROOT_DIR}
              PATH_SUFFIXES bin Scripts)
 
-IF(SIP_EXECUTABLE)
+IF(SIP_VERSION VERSION_LESS 6 AND SIP_EXECUTABLE)
   # Set path to sip's Python module
   GET_FILENAME_COMPONENT(SIP_PYTHONPATH "${SIP_EXECUTABLE}" PATH) # <root>/bin/sip -> <root>/bin
   GET_FILENAME_COMPONENT(SIP_PYTHONPATH "${SIP_PYTHONPATH}" PATH) # <root>/bin -> <root>
@@ -54,14 +72,15 @@
                   OUTPUT_VARIABLE SIP_VERSION
                   OUTPUT_STRIP_TRAILING_WHITESPACE
                   ERROR_QUIET)
-ENDIF()
-
-# Find sip-module executable (only for version >= 5)
-IF(SIP_VERSION AND SIP_VERSION VERSION_GREATER_EQUAL "5")
-  FIND_PROGRAM(SIP_MODULE_EXECUTABLE
-               NAMES sip-module
-               HINTS $ENV{SIP_ROOT_DIR}
-               PATH_SUFFIXES bin Scripts)
+ELSE()
+  # Set path to sip's Python module
+  GET_FILENAME_COMPONENT(SIP_PYTHONPATH "${SIP_MODULE_EXECUTABLE}" PATH) # <root>/bin/sip -> <root>/bin
+  GET_FILENAME_COMPONENT(SIP_PYTHONPATH "${SIP_PYTHONPATH}" PATH) # <root>/bin -> <root>
+  IF(WIN32)
+    SET(SIP_PYTHONPATH "${SIP_PYTHONPATH}/lib/site-packages")
+  ELSE()
+    SET(SIP_PYTHONPATH "${SIP_PYTHONPATH}/lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages")
+  ENDIF()
 ENDIF()
 
 # Find header file (only for version < 5)
@@ -73,7 +92,9 @@
 ENDIF()
 
 INCLUDE(FindPackageHandleStandardArgs)
-IF(SIP_VERSION AND SIP_VERSION VERSION_GREATER_EQUAL "5")
+IF(SIP_VERSION AND SIP_VERSION VERSION_GREATER_EQUAL "6")
+  FIND_PACKAGE_HANDLE_STANDARD_ARGS(SIP REQUIRED_VARS SIP_MODULE_EXECUTABLE SIP_BUILD_EXECUTABLE SIP_PYTHONPATH)
+ELSEIF(SIP_VERSION AND SIP_VERSION VERSION_GREATER_EQUAL "5")
   FIND_PACKAGE_HANDLE_STANDARD_ARGS(SIP REQUIRED_VARS SIP_EXECUTABLE SIP_MODULE_EXECUTABLE SIP_PYTHONPATH)
 ELSE()
   FIND_PACKAGE_HANDLE_STANDARD_ARGS(SIP REQUIRED_VARS SIP_INCLUDE_DIR SIP_EXECUTABLE SIP_PYTHONPATH)
diff --color -ruNZ CONFIGURATION/cmake/UsePyQt.cmake CONFIGURATION.new/cmake/UsePyQt.cmake
--- CONFIGURATION/cmake/UsePyQt.cmake	2023-06-19 18:25:20.000000000 +0200
+++ CONFIGURATION.new/cmake/UsePyQt.cmake	2025-02-25 14:57:44.892989265 +0100
@@ -132,7 +132,11 @@
 # 
 ####################################################################
 MACRO(PYQT_WRAP_SIP outfiles)
-  SIP_WRAP_SIP(${outfiles} ${ARGN} OPTIONS ${PYQT_SIPFLAGS})
+  IF(SIP_VERSION AND SIP_VERSION VERSION_GREATER_EQUAL "6")
+      SIP_BUILD_GENERATE(${outfiles} ${ARGN} OPTIONS ${PYQT_SIP6FLAGS})
+  ELSE()
+      SIP_WRAP_SIP(${outfiles} ${ARGN} OPTIONS ${PYQT_SIPFLAGS})
+  ENDIF()
 ENDMACRO(PYQT_WRAP_SIP)
 
 ####################################################################
diff --color -ruNZ CONFIGURATION/cmake/UseSIP.cmake CONFIGURATION.new/cmake/UseSIP.cmake
--- CONFIGURATION/cmake/UseSIP.cmake	2023-06-19 18:25:20.000000000 +0200
+++ CONFIGURATION.new/cmake/UseSIP.cmake	2025-02-25 21:37:36.342802557 +0100
@@ -56,9 +56,9 @@
 ####################################################################
 MACRO(SIP_WRAP_SIP outfiles)
   SET(_output)
-  SET(_src_ext ".cc")
-  SET(_options -s ${_src_ext} -c .)
-  SET(_sip_files)
+  SET(_src_ext ".cc") # Extension
+  SET(_options -s ${_src_ext} -c .) # -c NAME_OF_CODE_DIRECTORY
+  SET(_sip_files) # SIP FILES
   SET(_get_options "0")
   SET(_get_sources "0")
   FOREACH(_input ${ARGN})
@@ -86,9 +86,9 @@
     FOREACH(_sip_module ${_sip_modules})
       STRING(REGEX MATCH ".*%Module *\\( *name=.*\\).*" _mod_name "${_sip_module}")
       IF (_mod_name)
-	STRING(REGEX REPLACE ".*%Module *\\( *name=(.*).*\\).*" "\\1" _mod_name ${_sip_module})
+	       STRING(REGEX REPLACE ".*%Module *\\( *name=(.*).*\\).*" "\\1" _mod_name ${_sip_module})
       ELSE()
-	STRING(REGEX REPLACE ".*%Module *(.*)" "\\1" _mod_name ${_sip_module})
+	       STRING(REGEX REPLACE ".*%Module *(.*)" "\\1" _mod_name ${_sip_module})
       ENDIF()
       SET(_mod_header "sipAPI${_mod_name}.h")
       SET(_mod_source "sip${_mod_name}cmodule${_src_ext}")
@@ -99,9 +99,9 @@
     FOREACH(_sip_class ${_sip_classes})
       STRING(REGEX MATCH ".*class +.* *:" _class_name "${_sip_class}")
       IF (_class_name)
-	STRING(REGEX REPLACE ".*class +(.*) *:.*" "\\1" _class_name ${_sip_class})
+	       STRING(REGEX REPLACE ".*class +(.*) *:.*" "\\1" _class_name ${_sip_class})
       ELSE()
-	STRING(REGEX REPLACE ".*class *(.*)" "\\1" _class_name ${_sip_class})
+	       STRING(REGEX REPLACE ".*class *(.*)" "\\1" _class_name ${_sip_class})
       ENDIF()
       STRING(STRIP ${_class_name} _class_name)
       SET(_class_source "sip${_mod_name}${_class_name}${_src_ext}")
@@ -124,3 +124,100 @@
     DEPENDS ${_module_input} ${_extra_deps}
     )
 ENDMACRO(SIP_WRAP_SIP)
+
+MACRO(SIP_BUILD_GENERATE outfiles)
+    # Using `sip-build --no-compile` command for generating the C++ files. This
+    # macro gathers the list of generated C++ files and runs the sip-build
+    # command as "sip-build --no-compile --build-dir ${CMAKE_CURRENT_BINARY_DIR}"
+    # BE CAREFUL! The --build-dir option DELETES the target directory without
+    # checking if files exist there!
+
+    # Using similar logic as above macro to retain compatibility. Options are
+    # not propagated due to the unnecessarily new complex of defining SIP
+    # projects...
+
+    SET(_output)
+    set(_sip_files)
+    SET(_get_options "0")
+    SET(_get_sources "0")
+
+    FOREACH(_input ${ARGN})
+        IF(${_input} STREQUAL "OPTIONS")
+            SET(_get_options "1")
+            SET(_get_sources "0")
+        ELSEIF(${_input} STREQUAL "SOURCES")
+            SET(_get_sources "1")
+            SET(_get_options "0")
+        ELSE()
+            IF(${_get_options} STREQUAL "1")
+                SET(_options ${_options} ${_input})
+            ELSEIF(${_get_sources} STREQUAL "1")
+            ELSE()
+                SET(_sip_files ${_sip_files} ${_input})
+            ENDIF()
+        ENDIF()
+    ENDFOREACH()
+
+    SET(_output_build_dir ${CMAKE_CURRENT_BINARY_DIR}/sip_build)
+    # If pyproject.toml.in exists configure it, then copy pyproject.toml
+    IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/pyproject.toml.in)
+        CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/pyproject.toml.in pyproject.toml @ONLY)
+    ELSEIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/pyproject.toml)
+        CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/pyproject.toml pyproject.toml COPYONLY)
+    ENDIF()
+
+    # Read the pyproject toml file
+    FILE(STRINGS ${CMAKE_CURRENT_BINARY_DIR}/pyproject.toml _PYPROJECT_TEXT)
+    while(_PYPROJECT_TEXT)
+        LIST(POP_FRONT _PYPROJECT_TEXT LINE)
+        STRING(REGEX MATCH "name *= *\"(.*)\"" _ "${LINE}")
+        IF(CMAKE_MATCH_1)
+            SET(_sip_module_name ${CMAKE_MATCH_1})
+            BREAK()
+        ENDIF()
+    ENDWHILE()
+
+    # Copy from SOURCE to Build dir
+    FOREACH(_sip_file ${_sip_files})
+        CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${_sip_file} ${_sip_file} COPYONLY)
+    ENDFOREACH()
+
+    # Create the list of all generated SIP files. One could manually scan the
+    # output directory, but this works as well.
+    FOREACH(_input ${_sip_files})
+        FILE(STRINGS ${_input} _sip_modules REGEX "%Module( |\\()")
+        FILE(STRINGS ${_input} _sip_classes REGEX "^class ")
+        FOREACH(_sip_module ${_sip_modules})
+            STRING(REGEX MATCH ".*%Module *\\( *name=.*\\).*" _mod_name "${_sip_module}")
+            IF(_mod_name)
+                STRING(REGEX REPLACE ".*%Module *\\( *name=(.*).*\\).*" "\\1" _mod_name ${_sip_module})
+            ELSE()
+                STRING(REGEX REPLACE ".*%Module *(.*)" "\\1" _mod_name ${_sip_module})
+            ENDIF()
+            SET(_mod_header "sipAPI${_mod_name}.h")
+            SET(_mod_source "sip${_mod_name}cmodule.cpp")
+            LIST(APPEND _output ${_output_build_dir}/${_mod_source})
+            SET(${outfiles} ${${outfiles}} ${_output_build_dir}/${_sip_module_name}/${_mod_source})
+            SET(_module_input ${_input})
+        ENDFOREACH()
+        FOREACH(_sip_class ${_sip_classes})
+          STRING(REGEX MATCH ".*class +.* *:" _class_name "${_sip_class}")
+          IF (_class_name)
+             STRING(REGEX REPLACE ".*class +(.*) *:.*" "\\1" _class_name ${_sip_class})
+          ELSE()
+             STRING(REGEX REPLACE ".*class *(.*)" "\\1" _class_name ${_sip_class})
+          ENDIF()
+          STRING(STRIP ${_class_name} _class_name)
+          SET(_class_source "sip${_mod_name}${_class_name}.cpp")
+          LIST(APPEND _output ${_output_build_dir}/${_class_source})
+          SET(${outfiles} ${${outfiles}} ${_output_build_dir}/${_sip_module_name}/${_class_source})
+        ENDFOREACH()
+    ENDFOREACH()
+
+    LIST(GET _sip_files 0 _main_sip_file)
+
+    EXECUTE_PROCESS(
+      COMMAND ${SIP_BUILD_EXECUTABLE} --no-compile --build-dir ${_output_build_dir} ${_options}
+      WORKING_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR}
+      )
+ENDMACRO(SIP_BUILD_GENERATE)
